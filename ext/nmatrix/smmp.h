#ifndef SMMP_H
# define SMMP_H

// TODO: This file possibly needs to be rewritten such that it is autogenerated from smmp by generator.rb.

#include "types.h"

// Shouldn't be necessary, as they're defined in types.h:
// (Oddly, though, these fix the error.)
typedef uint8_t   u_int8_t;
typedef uint16_t   u_int16_t;
typedef uint32_t  u_int32_t;
typedef uint64_t  u_int64_t;


#define SMMP_MAX_THREE(a,b,c) ((a)>(b) ? ( (a)>(c) ? (a) : (c) ) : ( (b)>(c) ? (b) : (c) ))
#define SMMP_MIN(a,b) ((a)>(b) ? (b) : (a))
#define SMMP_MAX(a,b) ((a)>(b) ? (a) : (b))

void i8_symbmm_(u_int8_t n, u_int8_t m, u_int8_t l, u_int8_t *ia,
	u_int8_t *ja, bool diaga, u_int8_t *ib, u_int8_t *jb, bool diagb,
	 u_int8_t *ic, u_int8_t *jc, bool diagc);

void i16_symbmm_(u_int16_t n, u_int16_t m, u_int16_t l, u_int16_t *ia,
	u_int16_t *ja, bool diaga, u_int16_t *ib, u_int16_t *jb, bool diagb,
	 u_int16_t *ic, u_int16_t *jc, bool diagc);

void i32_symbmm_(u_int32_t n, u_int32_t m, u_int32_t l, u_int32_t *ia,
	u_int32_t *ja, bool diaga, u_int32_t *ib, u_int32_t *jb, bool diagb,
	 u_int32_t *ic, u_int32_t *jc, bool diagc);

void i64_symbmm_(u_int64_t n, u_int64_t m, u_int64_t l, u_int64_t *ia,
	u_int64_t *ja, bool diaga, u_int64_t *ib, u_int64_t *jb, bool diagb,
	 u_int64_t *ic, u_int64_t *jc, bool diagc);



void i8_f32_numbmm_(u_int8_t n, u_int8_t m, u_int8_t l, u_int8_t *ia,
	u_int8_t *ja, bool diaga, float *a, u_int8_t *ib, u_int8_t *jb,
	bool diagb, float *b, u_int8_t *ic, u_int8_t *jc, bool diagc,
	float *c__);

void i8_f64_numbmm_(u_int8_t n, u_int8_t m, u_int8_t l, u_int8_t *ia,
	u_int8_t *ja, bool diaga, double *a, u_int8_t *ib, u_int8_t *jb,
	bool diagb, double *b, u_int8_t *ic, u_int8_t *jc, bool diagc,
	double *c__);

void i16_f32_numbmm_(u_int16_t n, u_int16_t m, u_int16_t l, u_int16_t *ia,
	u_int16_t *ja, bool diaga, float *a, u_int16_t *ib, u_int16_t *jb,
	bool diagb, float *b, u_int16_t *ic, u_int16_t *jc, bool diagc,
	float *c__);

void i16_f64_numbmm_(u_int16_t n, u_int16_t m, u_int16_t l, u_int16_t *ia,
	u_int16_t *ja, bool diaga, double *a, u_int16_t *ib, u_int16_t *jb,
	bool diagb, double *b, u_int16_t *ic, u_int16_t *jc, bool diagc,
	double *c__);

void i32_f32_numbmm_(u_int32_t n, u_int32_t m, u_int32_t l, u_int32_t *ia,
	u_int32_t *ja, bool diaga, float *a, u_int32_t *ib, u_int32_t *jb,
	bool diagb, float *b, u_int32_t *ic, u_int32_t *jc, bool diagc,
	float *c__);

void i32_f64_numbmm_(u_int32_t n, u_int32_t m, u_int32_t l, u_int32_t *ia,
	u_int32_t *ja, bool diaga, double *a, u_int32_t *ib, u_int32_t *jb,
	bool diagb, double *b, u_int32_t *ic, u_int32_t *jc, bool diagc,
	double *c__);

void i64_f32_numbmm_(u_int64_t n, u_int64_t m, u_int64_t l, u_int64_t *ia,
	u_int64_t *ja, bool diaga, float *a, u_int64_t *ib, u_int64_t *jb,
	bool diagb, float *b, u_int64_t *ic, u_int64_t *jc, bool diagc,
	float *c__);

void i64_f64_numbmm_(u_int64_t n, u_int64_t m, u_int64_t l, u_int64_t *ia,
	u_int64_t *ja, bool diaga, double *a, u_int64_t *ib, u_int64_t *jb,
	bool diagb, double *b, u_int64_t *ic, u_int64_t *jc, bool diagc,
	double *c__);



void i8_f32_transp_(int8_t n, int8_t m, int8_t *ia, int8_t *ja,
	 bool diaga, float *a, int8_t *ib, int8_t *jb, float *b, bool move);

void i8_f64_transp_(int8_t n, int8_t m, int8_t *ia, int8_t *ja,
	 bool diaga, double *a, int8_t *ib, int8_t *jb, double *b, bool	move);

void i16_f32_transp_(int16_t n, int16_t m, int16_t *ia, int16_t *ja,
	 bool diaga, float *a, int16_t *ib, int16_t *jb, float *b, bool	move);

void i16_f64_transp_(int16_t n, int16_t m, int16_t *ia, int16_t *ja,
	 bool diaga, double *a, int16_t *ib, int16_t *jb, double *b, bool	move);

void i32_f32_transp_(int32_t n, int32_t m, int32_t *ia, int32_t *ja,
	 bool diaga, float *a, int32_t *ib, int32_t *jb, float *b, bool	move);

void i32_f64_transp_(int32_t n, int32_t m, int32_t *ia, int32_t *ja,
   bool diaga, double *a, int32_t *ib, int32_t *jb, double *b, bool move);

void i64_f32_transp_(int64_t n, int64_t m, int64_t *ia, int64_t *ja,
	 bool diaga, float *a, int64_t *ib, int64_t *jb, float *b, bool	move);

void i64_f64_transp_(int64_t n, int64_t m, int64_t *ia, int64_t *ja,
	 bool diaga, double *a, int64_t *ib, int64_t *jb, double *b, bool	move);


void i8_f32_smmp(
  u_int8_t  n,    // # rows in A / C
  u_int8_t m,    // # columns in A / rows in B
  u_int8_t l,    // # columns in B / C
  u_int8_t *ia,  // the IA array for A
  u_int8_t *ja,  // the JA array for A
  bool diaga,// 1 for new yale, 0 for old yale
  float *a,  // the A array for matrix A
  u_int8_t *ib,  // the IA array for B
  u_int8_t *jb,  // the JA array for B
  bool diagb,// 1 for new yale, 0 for old yale
  float *b,  // the A array for matrix B
  u_int8_t *ic,  // the IA array for result
  u_int8_t *jc,  // the JA array for result
  bool diagc,// 1 for new yale, 0 for old yale
  float *c   // the A array for matrix C
);

void i8_f64_smmp(
  u_int8_t  n,    // # rows in A / C
  u_int8_t m,    // # columns in A / rows in B
  u_int8_t l,    // # columns in B / C
  u_int8_t *ia,  // the IA array for A
  u_int8_t *ja,  // the JA array for A
  bool diaga,// 1 for new yale, 0 for old yale
  double *a,  // the A array for matrix A
  u_int8_t *ib,  // the IA array for B
  u_int8_t *jb,  // the JA array for B
  bool diagb,// 1 for new yale, 0 for old yale
  double *b,  // the A array for matrix B
  u_int8_t *ic,  // the IA array for result
  u_int8_t *jc,  // the JA array for result
  bool diagc,// 1 for new yale, 0 for old yale
  double *c   // the A array for matrix C
);

void i16_f32_smmp(
  u_int16_t  n,    // # rows in A / C
  u_int16_t m,    // # columns in A / rows in B
  u_int16_t l,    // # columns in B / C
  u_int16_t *ia,  // the IA array for A
  u_int16_t *ja,  // the JA array for A
  bool diaga,// 1 for new yale, 0 for old yale
  float *a,  // the A array for matrix A
  u_int16_t *ib,  // the IA array for B
  u_int16_t *jb,  // the JA array for B
  bool diagb,// 1 for new yale, 0 for old yale
  float *b,  // the A array for matrix B
  u_int16_t *ic,  // the IA array for result
  u_int16_t *jc,  // the JA array for result
  bool diagc,// 1 for new yale, 0 for old yale
  float *c   // the A array for matrix C
);

void i16_f64_smmp(
  u_int16_t  n,    // # rows in A / C
  u_int16_t m,    // # columns in A / rows in B
  u_int16_t l,    // # columns in B / C
  u_int16_t *ia,  // the IA array for A
  u_int16_t *ja,  // the JA array for A
  bool diaga,// 1 for new yale, 0 for old yale
  double *a,  // the A array for matrix A
  u_int16_t *ib,  // the IA array for B
  u_int16_t *jb,  // the JA array for B
  bool diagb,// 1 for new yale, 0 for old yale
  double *b,  // the A array for matrix B
  u_int16_t *ic,  // the IA array for result
  u_int16_t *jc,  // the JA array for result
  bool diagc,// 1 for new yale, 0 for old yale
  double *c   // the A array for matrix C
);

void i32_f32_smmp(
  u_int32_t  n,    // # rows in A / C
  u_int32_t m,    // # columns in A / rows in B
  u_int32_t l,    // # columns in B / C
  u_int32_t *ia,  // the IA array for A
  u_int32_t *ja,  // the JA array for A
  bool diaga,// 1 for new yale, 0 for old yale
  float *a,  // the A array for matrix A
  u_int32_t *ib,  // the IA array for B
  u_int32_t *jb,  // the JA array for B
  bool diagb,// 1 for new yale, 0 for old yale
  float *b,  // the A array for matrix B
  u_int32_t *ic,  // the IA array for result
  u_int32_t *jc,  // the JA array for result
  bool diagc,// 1 for new yale, 0 for old yale
  float *c   // the A array for matrix C
);

void i32_f64_smmp(
  u_int32_t  n,    // # rows in A / C
  u_int32_t m,    // # columns in A / rows in B
  u_int32_t l,    // # columns in B / C
  u_int32_t *ia,  // the IA array for A
  u_int32_t *ja,  // the JA array for A
  bool diaga,// 1 for new yale, 0 for old yale
  double *a,  // the A array for matrix A
  u_int32_t *ib,  // the IA array for B
  u_int32_t *jb,  // the JA array for B
  bool diagb,// 1 for new yale, 0 for old yale
  double *b,  // the A array for matrix B
  u_int32_t *ic,  // the IA array for result
  u_int32_t *jc,  // the JA array for result
  bool diagc,// 1 for new yale, 0 for old yale
  double *c   // the A array for matrix C
);

void i64_f32_smmp(
  u_int64_t  n,    // # rows in A / C
  u_int64_t m,    // # columns in A / rows in B
  u_int64_t l,    // # columns in B / C
  u_int64_t *ia,  // the IA array for A
  u_int64_t *ja,  // the JA array for A
  bool diaga,// 1 for new yale, 0 for old yale
  float *a,  // the A array for matrix A
  u_int64_t *ib,  // the IA array for B
  u_int64_t *jb,  // the JA array for B
  bool diagb,// 1 for new yale, 0 for old yale
  float *b,  // the A array for matrix B
  u_int64_t *ic,  // the IA array for result
  u_int64_t *jc,  // the JA array for result
  bool diagc,// 1 for new yale, 0 for old yale
  float *c   // the A array for matrix C
);

void i64_f64_smmp(
  u_int64_t  n,    // # rows in A / C
  u_int64_t m,    // # columns in A / rows in B
  u_int64_t l,    // # columns in B / C
  u_int64_t *ia,  // the IA array for A
  u_int64_t *ja,  // the JA array for A
  bool diaga,// 1 for new yale, 0 for old yale
  double *a,  // the A array for matrix A
  u_int64_t *ib,  // the IA array for B
  u_int64_t *jb,  // the JA array for B
  bool diagb,// 1 for new yale, 0 for old yale
  double *b,  // the A array for matrix B
  u_int64_t *ic,  // the IA array for result
  u_int64_t *jc,  // the JA array for result
  bool diagc,// 1 for new yale, 0 for old yale
  double *c   // the A array for matrix C
);

#endif
